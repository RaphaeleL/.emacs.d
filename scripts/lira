#!/bin/bash

# Lira CLI - Emacs configuration management tool
# Usage: lira [command] [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
EMACS_DIR="$HOME/.emacs.d"
LIRA_CONFIG_DIR="$HOME/.config/lira"

# Helper functions
print_usage() {
    echo "Lira CLI - Emacs configuration management tool"
    echo ""
    echo "Usage: lira [command] [options]"
    echo ""
    echo "Commands:"
    echo "  health     Check the health of your Lira configuration"
    echo "  test       Run tests on your Lira configuration"
    echo "  restart    Clean and restart Emacs (deletes elpa, eln-cache, etc.)"
    echo "  uninstall  Completely remove Lira configuration and clean up"
    echo "  nuke       Alias for uninstall - completely remove everything"
    echo "  help       Show this help message"
    echo ""
}

print_status() {
    local status=$1
    local message=$2
    case $status in
        "ok")
            echo -e "${GREEN}✓${NC} $message"
            ;;
        "warning")
            echo -e "${YELLOW}⚠${NC} $message"
            ;;
        "error")
            echo -e "${RED}✗${NC} $message"
            ;;
        "info")
            echo -e "${BLUE}ℹ${NC} $message"
            ;;
    esac
}

check_emacs_installation() {
    if command -v emacs >/dev/null 2>&1; then
        local version=$(emacs --version | head -n1)
        print_status "ok" "Emacs found: $version"
        return 0
    else
        print_status "error" "Emacs not found in PATH"
        return 1
    fi
}

check_lira_config() {
    if [ -d "$LIRA_CONFIG_DIR" ]; then
        print_status "ok" "Lira config directory found: $LIRA_CONFIG_DIR"
        
        # Check for essential files
        local missing_files=()
        for file in init.el keymaps.el custom.el; do
            if [ ! -f "$LIRA_CONFIG_DIR/$file" ]; then
                missing_files+=("$file")
            fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
            print_status "ok" "All essential Lira config files present"
        else
            print_status "warning" "Missing config files: ${missing_files[*]}"
        fi
        return 0
    else
        print_status "error" "Lira config directory not found: $LIRA_CONFIG_DIR"
        return 1
    fi
}

check_emacs_directories() {
    local dirs=("elpa" "eln-cache" "auto-save-list" "backups")
    local missing_dirs=()
    
    for dir in "${dirs[@]}"; do
        if [ ! -d "$EMACS_DIR/$dir" ]; then
            missing_dirs+=("$dir")
        fi
    done
    
    if [ ${#missing_dirs[@]} -eq 0 ]; then
        print_status "ok" "All Emacs directories present"
    else
        print_status "warning" "Missing directories: ${missing_dirs[*]}"
    fi
}

check_symlink() {
    if [ -L "$EMACS_DIR/init.el" ]; then
        local target=$(readlink "$EMACS_DIR/init.el")
        if [ "$target" = "$LIRA_CONFIG_DIR/init.el" ]; then
            print_status "ok" "Symlink correctly points to Lira config"
        else
            print_status "warning" "Symlink points to: $target"
        fi
    else
        print_status "warning" "No symlink found at $EMACS_DIR/init.el"
    fi
}

# Health check command
health_check() {
    echo "🔍 Running Lira health check..."
    echo ""
    
    local errors=0
    
    # Check Emacs installation
    if ! check_emacs_installation; then
        ((errors++))
    fi
    
    echo ""
    
    # Check Lira configuration
    if ! check_lira_config; then
        ((errors++))
    fi
    
    echo ""
    
    # Check Emacs directories
    check_emacs_directories
    
    echo ""
    
    # Check symlink
    check_symlink
    
    echo ""
    
    if [ $errors -eq 0 ]; then
        print_status "ok" "Health check completed successfully!"
        exit 0
    else
        print_status "error" "Health check found $errors error(s)"
        exit 1
    fi
}

# Test command
run_tests() {
    echo "🧪 Running Lira tests..."
    echo ""
    
    if [ -f "$EMACS_DIR/tests/run-tests.el" ]; then
        print_status "info" "Running tests from $EMACS_DIR/tests/run-tests.el"
        
        # Run tests in batch mode
        if emacs --batch --load "$EMACS_DIR/tests/run-tests.el" 2>/dev/null; then
            print_status "ok" "All tests passed!"
            exit 0
        else
            print_status "error" "Some tests failed"
            exit 1
        fi
    else
        print_status "warning" "No test file found at $EMACS_DIR/tests/run-tests.el"
        print_status "info" "Creating basic test file..."
        
        # Create a basic test file
        mkdir -p "$EMACS_DIR/tests"
        cat > "$EMACS_DIR/tests/run-tests.el" << 'EOF'
;; Basic Lira test suite
(message "Running Lira tests...")

;; Test 1: Check if init.el loads
(condition-case err
    (load-file "~/.emacs.d/init.el")
  (error
   (message "Error loading init.el: %s" err)
   (kill-emacs 1)))

;; Test 2: Check if Lira config is accessible
(if (file-exists-p "~/.config/lira/init.el")
    (message "✓ Lira config found")
  (message "✗ Lira config not found")
  (kill-emacs 1))

(message "All tests passed!")
(kill-emacs 0)
EOF
        
        print_status "ok" "Basic test file created"
        print_status "info" "Run 'lira test' again to execute tests"
    fi
}

# Restart command
restart_emacs() {
    echo "🔄 Restarting Emacs..."
    echo ""
    
    # Kill existing Emacs processes
    print_status "info" "Stopping existing Emacs processes..."
    pkill -f "emacs" 2>/dev/null || true
    
    # Wait a moment for processes to stop
    sleep 2
    
    # Clean directories
    local dirs_to_clean=("elpa" "eln-cache" "auto-save-list" "backups")
    
    for dir in "${dirs_to_clean[@]}"; do
        if [ -d "$EMACS_DIR/$dir" ]; then
            print_status "info" "Cleaning $dir..."
            rm -rf "$EMACS_DIR/$dir"
        fi
    done
    
    # Clean any temporary files
    print_status "info" "Cleaning temporary files..."
    find "$EMACS_DIR" -name "*.elc" -delete 2>/dev/null || true
    find "$EMACS_DIR" -name "*~" -delete 2>/dev/null || true
    find "$EMACS_DIR" -name "#*#" -delete 2>/dev/null || true
    
    print_status "ok" "Cleanup completed"
    
    # Start Emacs
    print_status "info" "Starting Emacs..."
    if command -v emacs >/dev/null 2>&1; then
        emacs &
        print_status "ok" "Emacs started successfully!"
    else
        print_status "error" "Failed to start Emacs - not found in PATH"
        exit 1
    fi
}

# Uninstall command
uninstall_lira() {
    echo "💥 Uninstalling Lira..."
    echo ""
    
    # Confirm with user
    echo -e "${YELLOW}⚠ This will completely remove Lira and clean up your Emacs configuration!${NC}"
    echo ""
    echo "This will:"
    echo "  - Remove Lira config directory (~/.config/lira)"
    echo "  - Remove symlink from ~/.emacs.d/init.el"
    echo "  - Clean up Emacs directories (elpa, eln-cache, etc.)"
    echo "  - Remove the lira CLI command"
    echo ""
    
    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstall cancelled."
        exit 0
    fi
    
    # Kill existing Emacs processes
    print_status "info" "Stopping existing Emacs processes..."
    pkill -f "emacs" 2>/dev/null || true
    
    # Wait a moment for processes to stop
    sleep 2
    
    # Remove Lira config directory
    if [ -d "$LIRA_CONFIG_DIR" ]; then
        print_status "info" "Removing Lira config directory..."
        rm -rf "$LIRA_CONFIG_DIR"
        print_status "ok" "Lira config directory removed"
    else
        print_status "warning" "Lira config directory not found"
    fi
    
    # Remove symlink
    if [ -L "$EMACS_DIR/init.el" ]; then
        print_status "info" "Removing symlink..."
        rm "$EMACS_DIR/init.el"
        print_status "ok" "Symlink removed"
    else
        print_status "warning" "No symlink found at $EMACS_DIR/init.el"
    fi
    
    # Clean Emacs directories
    local dirs_to_clean=("elpa" "eln-cache" "auto-save-list" "backups")
    
    for dir in "${dirs_to_clean[@]}"; do
        if [ -d "$EMACS_DIR/$dir" ]; then
            print_status "info" "Cleaning $dir..."
            rm -rf "$EMACS_DIR/$dir"
        fi
    done
    
    # Clean temporary files
    print_status "info" "Cleaning temporary files..."
    find "$EMACS_DIR" -name "*.elc" -delete 2>/dev/null || true
    find "$EMACS_DIR" -name "*~" -delete 2>/dev/null || true
    find "$EMACS_DIR" -name "#*#" -delete 2>/dev/null || true
    
    # Remove CLI command
    CLI_PATHS=("$HOME/.local/bin/lira" "/usr/local/bin/lira")
    
    for cli_path in "${CLI_PATHS[@]}"; do
        if [ -L "$cli_path" ]; then
            print_status "info" "Removing CLI command from $cli_path..."
            rm "$cli_path"
            print_status "ok" "CLI command removed"
        fi
    done
    
    # Create a minimal init.el if none exists
    if [ ! -f "$EMACS_DIR/init.el" ]; then
        print_status "info" "Creating minimal init.el..."
        cat > "$EMACS_DIR/init.el" << 'EOF'
;; Minimal Emacs configuration
;; Created after Lira uninstall

;; Basic settings
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; Enable some basic features
(show-paren-mode 1)
(global-linum-mode 1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Set theme
(load-theme 'deuteranopia t)

;; Basic keybindings
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x k") 'kill-this-buffer)

(message "Minimal Emacs configuration loaded")
EOF
        print_status "ok" "Minimal init.el created"
    fi
    
    print_status "ok" "Uninstall completed successfully!"
    echo ""
    echo -e "${GREEN}✓ Lira has been completely removed from your system${NC}"
    echo ""
    echo "Your Emacs will now start with a minimal configuration."
    echo "You can start Emacs normally to verify the changes."
}

# Main command handler
main() {
    case "${1:-help}" in
        "health")
            health_check
            ;;
        "test")
            run_tests
            ;;
        "restart")
            restart_emacs
            ;;
        "uninstall"|"nuke")
            uninstall_lira
            ;;
        "help"|"-h"|"--help")
            print_usage
            ;;
        *)
            echo -e "${RED}Error: Unknown command '$1'${NC}"
            echo ""
            print_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@" 