#+TITLE: My GNU Emacs Configuration
#+AUTHOR: Raphaele Salvatore Licciardo, M.Sc.
#+DESCRIPTION: Configuration for GNU Emacs.

* Introduction

This is my Configuration for GNU Emacs. 

* Configuration 
** Package  Handling 
*** MELPA

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src

*** Easier Package Handling

Handle Packages easier with `rc` from [[https://github.com/rexim/dotfiles/blob/master/.emacs.rc/rc.el][Tsoding's Configuration]].

#+begin_src emacs-lisp
(defvar rc/package-contents-refreshed nil)

(defun rc/package-refresh-contents-once ()
  (unless rc/package-contents-refreshed
    (setq rc/package-contents-refreshed t)
    (package-refresh-contents)))

(defun rc/require-one-package (package)
  (unless (package-installed-p package)
    (rc/package-refresh-contents-once)
    (package-install package)))

(defun rc/require (&rest packages)
  (dolist (package packages)
    (rc/require-one-package package)))

(defun rc/require-theme (theme)
  (let* ((theme-name (symbol-name theme))
         (theme-package-name (concat theme-name "-theme"))
         (theme-package (intern theme-package-name)))
    (rc/require theme-package)
    (load-theme theme t)))
#+end_src

** Settings

This section contains the settings for GNU Emacs.

*** Deutsche Mac Tastatur

Enable the German Mac Keyboard Layout.

#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (setq mac-command-modifier 'meta
	  mac-option-modifier 'none
	  default-input-method "MacOSX"))
#+end_src

*** Resize Options

Resize Windows and Frames pixelwise.

#+begin_src emacs-lisp
(setq window-resize-pixelwise t)
(setq frame-resize-pixelwise t)
#+end_src

*** Make ESC quit prompts

Make the ESC key quit prompts.

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Default Dir

Set the default directory to the home directory.

#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src

*** Disable package-enable-at-startup

Disable package-enable-at-startup.

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

*** Unset file-name-handler-alist

Unset file-name-handler-alist to speed up startup.

#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

*** Garbage Collection

Optimize garbage collection.

#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)

(defvar better-gc-cons-threshold 134217728 ; 128mb
  "The default value to use for `gc-cons-threshold'. If you experience freezing, decrease this.  If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))

(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))

(setq custom-file (locate-user-emacs-file "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** UI 

This section contains the User Interface settings for GNU Emacs.

*** Theme

Choose a theme for GNU Emacs.

#+begin_src emacs-lisp
;; (rc/require 'modus-themes)
;; (load-theme 'modus-operandi)
(rc/require 'doom-themes)
(load-theme 'doom-one-light)
#+end_src

*** Default Window Size

Set the default window size.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 45))
(add-to-list 'default-frame-alist '(width . 160)) 
#+end_src

*** Mode Line

Set the mode line to be more informative.

#+begin_src emacs-lisp
(rc/require 'mood-line)
(mood-line-mode 1)
#+end_src

*** Margin & Padding

Set the margin and padding.

#+begin_src emacs-lisp
(rc/require 'spacious-padding)
(rc/require 'perfect-margin)
(perfect-margin-mode 0)
(spacious-padding-mode 1)
#+end_src

*** No Fringes

Remove the fringes.

#+begin_src emacs-lisp
(set-fringe-mode 0)
#+end_src

*** No Startup Message

Disable the startup message.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(setq initial-major-mode 'text-mode)
#+end_src

*** Cleanup the UI

Remove the scroll bar, tool bar, tooltip, and menu bar.

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+end_src

*** Font

Set the default font.

#+begin_src emacs-lisp
(defun get-default-font ()
  (cond
   ((eq system-type 'windows-nt) "Iosevka-12")
   ((eq system-type 'darwin) "Iosevka-14")
   ((eq system-type 'gnu/linux) "Iosevka-12")))
;; (set-face-attribute 'default nil :font "Iosevka-16")
;; (set-face-attribute 'default nil :font "SF Mono-12")
(add-to-list 'default-frame-alist `(font . ,(get-default-font)))
#+end_src

*** Disable Backup and Autosave Settings

Disable backup and autosave settings.

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

*** Whitespace

Show whitespace characters.

#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :bind
  (("<f6>" . whitespace-mode)
   ("C-c z" . delete-trailing-whitespace))
  :config
  (setq whitespace-style
        '(face
          tabs
          spaces
          tab-mark
          space-mark
          trailing
          missing-newline-at-eof
          space-after-tab::tab
          space-after-tab::space
          space-before-tab::tab
          space-before-tab::space)))
#+end_src

*** Line numbers on the side of the window

Show line numbers on the side of the window.

#+begin_src emacs-lisp
(use-package display-line-numbers
  :ensure nil
  :bind
  ("<f7>" . display-line-numbers-mode)
  :config
  (setq-default display-line-numbers-type 'relative)
  (setq display-line-numbers-major-tick 0)
  (setq display-line-numbers-minor-tick 0)
  (setq-default display-line-numbers-widen t))
#+end_src

*** Completion

Customize the `M-X` completion.

**** Vertico

Enable Vertico for completion. It is a completion system that uses the minibuffer.

#+begin_src emacs-lisp
(rc/require 'vertico)
(use-package vertico
    :ensure t
    :config
        (vertico-mode))
(vertico-mode 1)
#+end_src

***** Orderless 

Enable Orderless for completion. It is a completion style that uses fuzzy matching.

#+begin_src emacs-lisp
(rc/require 'orderless)
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

**** Marginalia 

Enable Marginalia for completion. It is a completion style that shows additional information in the minibuffer.

#+begin_src emacs-lisp
(rc/require 'marginalia)
(use-package marginalia
    :bind (:map minibuffer-local-map
            ("M-A" . marginalia-cycle))

    :init
        (marginalia-mode))
(marginalia-mode 1)
#+end_src

**** Counsel 

Enable Counsel for completion. It is a completion system that uses the minibuffer.

#+begin_src emacs-lisp
(rc/require 'counsel)
(use-package counsel
    :init
        (counsel-mode))
(counsel-mode 1)
#+end_src

** Keybindings 

This section contains the keybindings for GNU Emacs.

*** Helper Function

#+begin_src emacs-lisp
(defun delete-current-line ()
  "Delete (not kill) the current line."
  (interactive)
  (save-excursion
    (delete-region
     (progn (forward-visible-line 0) (point))
     (progn (forward-visible-line 1) (point)))))
#+end_src

*** Simplify yes/no Prompts

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(setq use-dialog-box nil)
#+end_src

*** Dired

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "N") 'dired-create-empty-file))
#+end_src

*** Selection

#+begin_src emacs-lisp
(global-set-key (kbd "M-w") 'mark-word)
(global-set-key (kbd "M-a") 'mark-page)
(global-set-key (kbd "M-F") 'mark-defun)
(global-set-key (kbd "M-s") 'mark-paragraph)
#+end_src

*** Jumping

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-a") 'beginning-of-defun)
(global-set-key (kbd "C-c C-e") 'end-of-defun)
#+end_src

*** Misc

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-n") 'duplicate-line)
(global-set-key (kbd "C-c C-d") 'delete-current-line)
(global-set-key (kbd "C-c C-j") 'join-line)
(global-set-key (kbd "M-z") 'undo)
#+end_src

*** Shorter Versions of given Keymaps

#+begin_src emacs-lisp
(global-set-key (kbd "C-,") 'find-file)
(global-set-key (kbd "C-.") 'dired)
(global-set-key (kbd "C-c j") 'join-line)
(global-set-key (kbd "C-c n") 'duplicate-line)
(global-set-key (kbd "C-c d") 'delete-current-line)
(global-set-key (kbd "C-c a") 'beginning-of-defun)
(global-set-key (kbd "C-c e") 'end-of-defun)
#+end_src

*** Shell

#+begin_src emacs-lisp
(global-set-key (kbd "C-c m") 'compile)
(global-set-key (kbd "C-x m") 'compile)
(global-set-key (kbd "C-c s") 'shell-command)
#+end_src

*** Multi Cursor

#+begin_src emacs-lisp
(rc/require 'multiple-cursors)
(global-set-key (kbd "C-<") 'mc/mark-next-like-this)
(global-set-key (kbd "C->") 'mc/mark-previous-like-this)
(global-set-key (kbd "M-m") 'mc/mark-more-like-this-extended)
#+end_src

*** Font Size

#+begin_src emacs-lisp
(global-set-key (kbd "M-+") (lambda () (interactive) (text-scale-increase 1)))
(global-set-key (kbd "M--") (lambda () (interactive) (text-scale-decrease 1)))
#+end_src

*** Dired

#+begin_src emacs-lisp
(global-set-key (kbd "C-x .") 'dired)
(global-set-key (kbd "C-x d") 'dired)
(global-set-key (kbd "C-x C-d") 'dired)
#+end_src

*** Magit

#+begin_src emacs-lisp
(global-set-key (kbd "C-c g") 'magit-status)
(global-set-key (kbd "C-c C-g") 'magit-log-all)
#+end_src

*** Buffer 

#+begin_src emacs-lisp
(global-set-key (kbd "C-<tab>") 'next-buffer)
(global-set-key (kbd "C-<iso-lefttab>") 'previous-buffer)
(global-set-key (kbd "C-c i") 'ibuffer)
(global-set-key (kbd "C-c l") 'counsel-switch-buffer)
(global-set-key (kbd "C-c k") (lambda () (interactive) (kill-current-buffer)))
#+end_src

*** Copy and Paste

#+begin_src emacs-lisp
(rc/require 'simpleclip)
(simpleclip-mode 1)
(global-set-key (kbd "C-c c") 'simpleclip-copy)
(global-set-key (kbd "C-c v") 'simpleclip-paste)
#+end_src

*** Move Text

#+begin_src emacs-lisp
(rc/require 'move-text)
(global-set-key (kbd "M-p") 'move-text-up)
(global-set-key (kbd "M-n") 'move-text-down)
#+end_src

*** Which Key

#+begin_src
(rc/require 'which-key)
(use-package which-key
    :ensure nil ; built into Emacs 30
    :hook (after-init . which-key-mode)
    :config
    (setq which-key-separator "  ")
    (setq which-key-prefix-prefix "... ")
    (setq which-key-max-display-columns 3)
    (setq which-key-idle-delay 0.125)
    (setq which-key-idle-secondary-delay 0.25)
    (setq which-key-add-column-padding 1)
    (setq which-key-max-description-length 40))
(which-key-mode t)
#+end_src

** LSP 

This section contains the Language Server Protocol settings for GNU Emacs. So, we can use LSP features in Emacs like code completion, syntax checking, and more.

*** LSP Support

#+begin_src emacs-lisp
(unless (package-installed-p 'eglot)
  (package-install 'eglot))
#+end_src

*** Enable LSP support in Python and C modes

#+begin_src emacs-lisp
(add-hook 'python-mode-hook #'eglot-ensure)
(add-hook 'c-mode-hook #'eglot-ensure)
(add-hook 'c++-mode-hook #'eglot-ensure)
#+end_src

*** Enable completion using company mode

#+begin_src emacs-lisp
(unless (package-installed-p 'company)
  (package-install 'company))
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

*** Set up company backend for LSP

#+begin_src emacs-lisp
(with-eval-after-load 'company
  (setq company-backends '((company-capf company-dabbrev-code company-dabbrev))))
#+end_src

*** Optional: Configure key bindings for LSP features

#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (define-key eglot-mode-map (kbd "C-c C-r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c C-d") 'eldoc-doc-buffer))
#+end_src

*** Webmode

#+begin_src emacs-lisp
(rc/require 'web-mode)
(rc/require 'flycheck)
(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx?$" . web-mode))
#+end_src

** Org Mode

This section contains the settings for Org Mode.

*** Enabling Org Bullets

Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(rc/require 'org-bullets)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Source Code Block Tag Expansion

Org-tempo is a package that allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                           |
|------------------------+------------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src

*** Source Code Block Syntax Highlighting

We want the same syntax highlighting in source blocks as in the native language files.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src

*** Header Size 

For each level of header, we want a different size.

#+begin_src emacs-lisp
(setq org-fontify-whole-heading-line t)
(custom-set-faces
 '(org-level-1 ((t (:inherit default :weight bold :height 1.6))))
 '(org-level-2 ((t (:inherit default :weight bold :height 1.4))))
 '(org-level-3 ((t (:inherit default :weight bold :height 1.2))))
 '(org-level-4 ((t (:inherit default :weight bold :height 1.0))))
 )
#+end_src


